/*
Copyright 2019 The Lijiao Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/fafucoder/sriov-crd/pkg/apis/sriov/v1"
	scheme "github.com/fafucoder/sriov-crd/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PFsGetter has a method to return a PFInterface.
// A group's client should implement this interface.
type PFsGetter interface {
	PFs() PFInterface
}

// PFInterface has methods to work with PF resources.
type PFInterface interface {
	Create(*v1.PF) (*v1.PF, error)
	Update(*v1.PF) (*v1.PF, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.PF, error)
	List(opts metav1.ListOptions) (*v1.PFList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PF, err error)
	PFExpansion
}

// pFs implements PFInterface
type pFs struct {
	client rest.Interface
}

// newPFs returns a PFs
func newPFs(c *K8sCniCncfIoV1Client) *pFs {
	return &pFs{
		client: c.RESTClient(),
	}
}

// Get takes name of the pF, and returns the corresponding pF object, and an error if there is any.
func (c *pFs) Get(name string, options metav1.GetOptions) (result *v1.PF, err error) {
	result = &v1.PF{}
	err = c.client.Get().
		Resource("pfs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PFs that match those selectors.
func (c *pFs) List(opts metav1.ListOptions) (result *v1.PFList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.PFList{}
	err = c.client.Get().
		Resource("pfs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested pFs.
func (c *pFs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("pfs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a pF and creates it.  Returns the server's representation of the pF, and an error, if there is any.
func (c *pFs) Create(pF *v1.PF) (result *v1.PF, err error) {
	result = &v1.PF{}
	err = c.client.Post().
		Resource("pfs").
		Body(pF).
		Do().
		Into(result)
	return
}

// Update takes the representation of a pF and updates it. Returns the server's representation of the pF, and an error, if there is any.
func (c *pFs) Update(pF *v1.PF) (result *v1.PF, err error) {
	result = &v1.PF{}
	err = c.client.Put().
		Resource("pfs").
		Name(pF.Name).
		Body(pF).
		Do().
		Into(result)
	return
}

// Delete takes name of the pF and deletes it. Returns an error if one occurs.
func (c *pFs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("pfs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *pFs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("pfs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched pF.
func (c *pFs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PF, err error) {
	result = &v1.PF{}
	err = c.client.Patch(pt).
		Resource("pfs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
